#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: earthclock,v 1.51 2003/04/25 21:17:25 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2000,2001,2002,2003 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://ptktools.sourceforge.net/
#

=head1 NAME

earthclock - a nice clock displaying the earth

=head1 DESCRIPTION

This is a clock displaying the shaded image of the earth. This program
needs the xearth or xglobe program for generation of the current earth
shade. Alternatively, the current eumetsat picture can be fetched from
the WWW and displayed.

Additionally, it is possible to show a calendar of months with the
phases of the moon.

=head1 CONFIGURATION

All configuration is done through the right-button pop-up menu. If
the C<savevars> module is installed from CPAN, then settings are
preserved after exiting the program. The configuration is written to
C<~/.earthclockrc>.

=cut

use Tk;
use Getopt::Long;
use Math::Trig;

use FindBin;
use lib "$FindBin::RealBin";
BEGIN {
    unshift @INC, "$_/Earthclock", "$_/lib/Earthclock"
	for (reverse @INC);
}

use strict;

BEGIN {
    my @vars = qw($width $height $pos $wait $stay_on_top $autoraise
		  $dflt_earthcmd $xearth_cgi_url);
    eval           q{ use savevars @vars };
    if ($@) { eval q{ use vars     @vars } }
}

use vars qw($VERSION $sizes $eventtop $icalevent $win32_stay_on_top);

eval '
use lib "/home/e/eserte/lib/perl";
use Tk::App::Reloader;
$Tk::App::Reloader::VERBOSE = 1;
'; warn $@ if $@;

$VERSION = sprintf("%d.%02d", q$Revision: 1.51 $ =~ /(\d+)\.(\d+)/);

$sizes = { "tiny"   => [75,75,   2,2,1],
	   "small"  => [125,125, 4,4,2],
	   "medium" => [200,200, 5,5,3],
	   "large"  => [350,350, 7,7,5],
	   "huge"   => [500,500, 9,9,7],
	 };

$pos = "fixed,53,13" unless defined $pos;
$wait = 30*60 unless defined $wait && $wait >= 60;
$width = 200  unless defined $width && $width >= 30;
$height = 200 unless defined $height && $height >= 30;
$xearth_cgi_url = "http://www/~eserte/cgi/xearth.cgi?pos=%p&width=%w&height=%h"
    unless defined $xearth_cgi_url;
my $geometry;
my $tmpfile = tmpdir() . "/earth-$$.image";
my $date;
my $test = 0;
my $v;

my $meteosat7_url  = "http://www.nottingham.ac.uk/pub/sat-images/DTOT.JPG";
my $gms5_url       = "http://rsd.gsfc.nasa.gov/goesg/earth/Weather/GMS-5/jpg/vis/4km/0latest.jpg";
my $eumetsat_list_url = "http://www.eumetsat.de/cgi-bin/imagery/listImages.pl?m=0,c=1,o=0,s=0,f=1,a=0,n=6,d=1,v=400,p=0";
my $eumetsat_root_url = "http://www.eumetsat.de";
my $last_eumetsat_image;# XXX not used, see below
my $test_url       = "http://www/~eserte/test/test.jpg";

my $ua;

$SIG{INT} = \&cleanup;

my %earthcmd;
$earthcmd{'current Eumetsat'} = \&get_eumetsat_image;

# XXX can be deleted:
#  if (is_in_path("GET") && is_in_path("djpeg") && is_in_path("pnmscale")) {
#      # satellite images...
#      #    $earthcmd{'current Meteosat-7'} = "GET $meteosat7_url | djpeg -pnm | pnmscale -w %w -h %h > %o";

#      # not tested
#      #    $earthcmd{'current GMS-5'} = "GET $gms5_url | djpeg -pnm | pnmscale -w %w -h %h > %o";
#  } else {
#    $earthcmd{'current Meteosat-7'} = \&get_meteosat7_image;
#    $earthcmd{'current GMS-5'}      = \&get_gms5_image;
#}

$earthcmd{'xearth.cgi'}         = \&get_xearth_cgi_image;

if (is_in_path("xearth")) {
    # tested with xearth 1.0
    $earthcmd{'xearth'} = "xearth -nolabel -nomarkers -pos %p -size %w,%h -gif > %o";
}

if (is_in_path("xglobe")) {
    # tested with xglobe 0.2
    $earthcmd{'xglobe'} = "cd " . tmpdir() . "; xglobe -nolabel -nomarkers -pos %p -size %w,%h -dump; mv xglobe-dump.bmp %o";
}

if (ref $dflt_earthcmd eq 'CODE') { undef $dflt_earthcmd }

Getopt::Long::Configure("pass_through");
GetOptions("pos=s" => \$pos,
	   "wait=i" => \$wait,
	   "geometry=s" => \$geometry,
	   "stayontop!" => \$stay_on_top,
	   "earthcmd=s" => \$dflt_earthcmd,
	   "autoraise!" => \$autoraise,
	   "xearthcgiurl=s" => \$xearth_cgi_url,
	   "test!" => \$test,
	   "v!" => \$v,
	  );

if ($test) {
    $dflt_earthcmd = $earthcmd{'test'} = \&get_test_image;
}

if (!$dflt_earthcmd) {
    if (exists $earthcmd{'xearth'}) {
	$dflt_earthcmd = $earthcmd{'xearth'};
    } elsif (exists $earthcmd{'xglobe'}) {
	$dflt_earthcmd = $earthcmd{'xglobe'};
    } elsif (keys %earthcmd) {
	$dflt_earthcmd = $earthcmd{(keys %earthcmd)[0]};
    } else {
	warn "No earth/globe method available. Please install xearth, xglobe or LWP.\n";
    }
}

my($x,$y) = (0,0);
if (defined $geometry) {
    my(@p) = parse_geometry_string($geometry);
    if (defined $p[0] and defined $p[1]) {
	($x, $y) = @p[0, 1];
    }
    if (defined $p[2] and defined $p[3]) {
	($width, $height) = @p[2,3];
    }
}

# XXX GetOptions eats X11 config options before Tk::CmdLine ...
my $top = new MainWindow;
Tk::App::Reloader::shortcut() if defined &Tk::App::Reloader::shortcut;
#$top->WidgetDump;

my $id = hex($top->id);
$top->overrideredirect(1);
$top->geometry($width."x".$height."+".$x."+".$y);

my($lastx,$lasty);
my $last_earth_update;
my $img;
my $c_img;
my($shape_pixmap);

$top->bind("<Motion>" => \&motion);
$top->bind("<ButtonPress-1>" => sub { $top->raise; });
$top->bind("<ButtonRelease-1>" => sub { undef $lastx });
$top->bind("<c>" => \&create_cal_fail_safe); # XXX nimmt keine key-events an...

my $popup_menu = $top->Menu(-tearoff => 0);
$popup_menu->command(-label => "",
		     -command => \&create_cal_fail_safe);
my $date_entry = $popup_menu->index("last");
$popup_menu->separator;
$popup_menu->command(-label => "Force earth update",
		     -command => sub { undef $last_earth_update },
		    );
foreach (sort keys %earthcmd) {
    my $l = $_;
    $popup_menu->command(-label => "· $l",
			 -command => sub {
			     $dflt_earthcmd = $earthcmd{$l};
			     undef $last_earth_update;
			 });
}
$popup_menu->separator;

my $size_menu = $popup_menu->cascade(-label => "Size");
foreach my $size (qw(tiny small medium large huge)) {
    $size_menu->command(-label => ucfirst($size),
			-command => sub { set_size($size) },
		       );
}

$popup_menu->checkbutton(-label => "Stay on top",
			 -variable => \$stay_on_top,
			 -command => \&stay_on_top,
			);
$popup_menu->checkbutton(-label => "Autoraise",
			 -variable => \$autoraise,
			);

if (defined &Tk::App::Reloader::reload_new_modules) {
    $popup_menu->command(-label => "Reload modules",
			 -command => sub { Tk::App::Reloader::reload_new_modules() },
			);
}

$popup_menu->command(-label => "Alarm list",
		     -command => sub {
			 my $bbbikealarm = find_bbbikealarm_exe();
			 if (defined $bbbikealarm) {
			     system("perl $bbbikealarm -tk -list &");
			 }
		     });

$popup_menu->command(-label => "Exit",
		     -command => sub { $top->destroy },
		    );

$top->bind("<ButtonPress-2>" => \&set_alarm);
$top->bind("<ButtonPress-3>" => sub {
	       my $e = $_[0]->XEvent;
	       $popup_menu->Post($e->X, $e->Y);
	   });
$top->bind("<Enter>" => sub {
	       if ($autoraise) { $top->raise }
	       #$top->focus; # XXX don't work
	   });

my($wrapper) = $top->wrapper;

my $x11;
eval {
    require X11::Protocol;
    $x11 = new X11::Protocol;
    $x11->init_extension('SHAPE') or die;
};
if ($@) {
    warn $@;
    $top->overrideredirect(0);
}

my $c = $top->Canvas(-border => 0,
		     -height => $height,
		     -width => $width,
		     -highlightthickness => 0)->pack;

my $stay_above_after;
# Leider wird bei aktiviertem Shape Visibility nur geschickt, wenn das
# gesamte Fenster verdeckt wird (XFree 3.3.x)
$top->bind("<Visibility>" => sub {
	       if ($stay_on_top && ($^O eq 'MSWin32' && !$win32_stay_on_top)) {
		   if ($stay_above_after) {
		       $stay_above_after->cancel;
		   }
		   $stay_above_after = $c->after
		       (300, sub {
			    $top->raise;
			    #Tk->break;
			    undef $stay_above_after;
			});
	       }
 	   });

x11_shape_setup();

my($c_h, $c_m, $c_s);
my($c_h_width, $c_m_width, $c_s_width) = (5, 5, 3);
for (sort { $b->[0] <=> $a->[0] } values %$sizes) {
    if ($width >= $_->[0]) {
	($c_h_width, $c_m_width, $c_s_width) = @{$_}[2..4];
	last;
    }
}

ziffernblatt();

$top->repeat(1000, \&draw_time);

Tk::App::Reloader::check_loop() if defined &Tk::App::Reloader::check_loop;

stay_on_top();

MainLoop;

# RELOADER_START

sub ziffernblatt {
    $c->delete("ziffernblatt");
    $c_h = $c->createLine($width/2,$height/2,$width/2,$height/4,
			  -width=>$c_h_width,-fill=>"white",
			  -tags => "ziffernblatt");
    $c_m = $c->createLine($width/2,$height/2,$width/2,0,
			  -width=>$c_m_width,-fill=>"white",
			  -tags => "ziffernblatt");
    $c_s = $c->createLine($width/2,$height/2,$width/2,0,
			  -width=>$c_s_width,-fill=>"white",
			  -tags => "ziffernblatt");

    for my $h (0..11) {
	$c->createLine(
		       $width/2-sin(deg2rad((12-$h)*30))*$width/2,
		       $height/2-cos(deg2rad((12-$h)*30))*$height/2,
		       $width/2-sin(deg2rad((12-$h)*30))*($width/2-8),
		       $height/2-cos(deg2rad((12-$h)*30))*($height/2-8),
		       -fill => "white",
		       -tags => "ziffernblatt",
		      );
    }
}

sub set_size {
    my($size) = @_;
    ($width, $height, $c_h_width, $c_m_width, $c_s_width) =
	@{ $sizes->{$size} };

    $top->geometry($width."x".$height);
    $c->configure(-height => $height,
		  -width  => $width);

    $c->itemconfigure($c_h, -width => $c_h_width);
    $c->itemconfigure($c_m, -width => $c_m_width);
    $c->itemconfigure($c_s, -width => $c_s_width);

    ziffernblatt();
    undef $c_img; # canvas image item
    draw_time(-forcedraw => 1);
    x11_shape_setup(); # XXX destroy old rsrc
    adjust_position();
}

sub adjust_position {
    if ($top->rootx < 0 || $top->rooty < 0) {
	$top->MoveToplevelWindow($top->rootx < 0 ? 0 : $top->rootx,
				 $top->rooty < 0 ? 0 : $top->rooty
				);
    }
}

sub x11_shape_setup {
    return unless ($x11);

    if ($shape_pixmap) {
	$x11->FreePixmap($shape_pixmap);
	undef $shape_pixmap;
    }

#    if (1) {
    $shape_pixmap = $x11->new_rsrc;
    $x11->CreatePixmap($shape_pixmap, $wrapper, 1, $width, $height);
    my $gc = $x11->new_rsrc;
    $x11->CreateGC($gc, $shape_pixmap, 'foreground' => $x11->white_pixel);
    my $delgc = $x11->new_rsrc;
    $x11->CreateGC($delgc, $shape_pixmap, 'foreground' => $x11->black_pixel);
    $x11->PolyFillRectangle($shape_pixmap, $delgc,
			    [(0, 0), $width, $height]);
    $x11->PolyFillArc($shape_pixmap, $gc, [0, 0, $width-1, $height-1, 0, 23040]);

#      if (0) {
#      my $data = pack("b32"x8,	"................................",
#  				"...11......11......11......11...",
#  				"..1111....1111....1111....1111..",
#  				".111111..111111..111111..111111.",
#  				".111111..111111..111111..111111.",
#  				"..1111....1111....1111....1111..",
#  				"...11......11......11......11...",
#  				"...11......11......11......11...",
#  		    );
#      $x11->PutImage($shape_pixmap, $gc, 1, 32, 8, 0, 0, 0, 'XYPixmap', $data);
#      }


#      } else {
#  	$shape_pixmap=$top->GetBitmap(q{@/tmp/test.xbm});
#      }

    $x11->ShapeMask($wrapper, 'Bounding', 'Set', 0, 0, $shape_pixmap);
}

sub motion {
    return unless $x11;
    my $w = shift;
    my $e = $w->XEvent;
    return unless $e->s =~ /B1-/;
    if (defined $lastx) {
	my(%geom) = $x11->GetGeometry($wrapper);
	my $X = $geom{x}+$e->X-$lastx;
	my $Y = $geom{y}+$e->Y-$lasty;
	$x11->ConfigureWindow($wrapper, "x" => $X, "y" => $Y);
    }
    $lastx = $e->X;
    $lasty = $e->Y;
}

sub draw_time {
    my(%args) = @_;

    my(@t) = localtime;
    my($h,$m,$s) = @t[2,1,0];
    $h=$h%12;
    $h+=$m/60;
    $m+=$s/60;

    if (!defined $date || $date ne scalar localtime) {
	$date = scalar localtime;
	my(@d) = localtime;
	$popup_menu->entryconfigure
	    ($date_entry,
	     -label => sprintf("%s %4d-%02d-%02d",
			       (qw(Sun Mon Tue Wed Thu Fri Sat))[$d[6]],
			       1900+$d[5], 1+$d[4], $d[3]));
    }

    $c->coords($c_h, $width/2, $height/2,
	       $width/2-sin(deg2rad((12-$h)*30))*($width/2*.6),
	       $height/2-cos(deg2rad((12-$h)*30))*($height/2*.6));
    $c->coords($c_m, $width/2, $height/2,
	       $width/2-sin(deg2rad((60-$m)*6))*($width/2*.9),
	       $height/2-cos(deg2rad((60-$m)*6))*($height/2*.9));
    $c->coords($c_s, $width/2, $height/2,
	       $width/2-sin(deg2rad((60-$s)*6))*($width/2*.9),
	       $height/2-cos(deg2rad((60-$s)*6))*($height/2*.9));

    $c->idletasks;

    if ($dflt_earthcmd &&
	(!defined $last_earth_update ||
	 $last_earth_update+$wait<time ||
	 $args{-forcedraw})) {
	$img->delete if $img;

	$c->Busy;
	eval {
	    my $thisearthcmd = $dflt_earthcmd;
	    if (ref $thisearthcmd ne "CODE") {
		$thisearthcmd = subst_exe_string($thisearthcmd);
		system $thisearthcmd;
	    } else {
		$thisearthcmd->(-pos => $pos,
				-width => $width,
				-height => $height,
				-tmpfile => $tmpfile);
	    }

	    if (-r $tmpfile and -s $tmpfile) {
		$img = $top->Photo(-file => $tmpfile);
		if (!defined $c_img) {
		    $c_img = $c->createImage($width/2, $height/2, -tags => "img");
		    $c->lower("img");
		}
		$c->itemconfigure($c_img, -image => $img);
	    }
	    $last_earth_update=time;
	};
	my $err = @_;
	$c->Unbusy;
	if ($err) {
	    die $err;
	}
    }

}

sub subst_exe_string {
    my $s = shift;
    $s =~ s/%p/$pos/g;
    $s =~ s/%w/$width/g;
    $s =~ s/%h/$height/g;
    $s =~ s/%o/$tmpfile/g;
    $s;
}

sub parse_geometry_string {
    my $geometry = shift;
    my @extends;
    if ($geometry =~ /([-+]?\d+)x([-+]?\d+)/) {
	$extends[2] = $1;
	$extends[3] = $2;
    }
    if ($geometry =~ /[-+](\d+)[-+](\d+)/) {
	$extends[0] = $1;
	$extends[1] = $2;
    }
    @extends;
}

sub create_cal_fail_safe {
    eval {
	create_cal();
    };
    warn $@ if $@;
}

sub _cal {
    my($m,$y) = @_;
    my @r;
    eval {
	require Date::Calendar;
	@r = split(/\n/, Date::Calendar::cal($m, $y, -mondayfirst => 'auto'), -1);
    };
    return @r if (@r);
    `cal $m $y`;
}

sub create_cal {

    my $tl = $top->Toplevel;
    $tl->title("Calendar");

    my(@cal) = _cal(12, 2000); # sample data with 6 weeks

    my $fixf;
    my $fixed_font_name = ($Tk::platform eq 'MSWin32' ? 'Courier -16' : 'Courier -16');
    if (!$top->{FixedFont}) {
	my $l = $tl->Label;
	my $font = $l->cget(-font);
	$l->destroy;
	if ($Tk::platform ne 'MSWin32' and $top->fontMetrics($font, -fixed)) {
	    $fixf = $font;
	} else {
	    $fixf = $fixed_font_name;
	}
	$top->{FixedFont} = $fixf;
    } else {
	$fixf = $top->{FixedFont};
    }

    # get width and height
    my $maxlen = 0;
    my $lines = 0;
    foreach (@cal) {
	$maxlen = length($_) if $maxlen < length($_);
	$lines++;
    }
    my $cw = $top->fontMeasure($fixf, "x");
    my $w = $cw*$maxlen;
    my $lh = $top->fontMetrics($fixf, -linespace);
    my $h = $lh*$lines;
    ($w, $h) = (max($w,$h))x2; # quadrat

    my $c = $tl->Canvas(-width => $w-1, -height => $h-1,
			-background => "black",
			-highlightthickness => 0,
			-takefocus => 0)->pack;

    $c->{LineHeight} = $lh;
    $c->{CharWidth}  = $cw;
    $c->{Font}       = $fixf;

    require Astro::Phoon;
    my $p = Astro::Phoon::tk_photo($top, -width => $w, -height => $h);

    if ($p) {
	$c->createImage(0, 0, -image => $p, -anchor => "nw");
    }

    my $FireButton = "Button";
    eval {
	require Tk::FireButton;
	$FireButton = "FireButton";
    };
    my $prev = $tl->$FireButton(-text => "<",
				-padx => 0, -pady => 0,
				-font => "5x7")->place('-x' => 2, '-y' => 2);
    my $next = $tl->$FireButton(-text => ">",
				-padx => 0, -pady => 0,
				-font => "5x7")->place(-relx => 1,
						       '-x' => -14, '-y' => 2,
						      );
    $c->{Prev} = $prev;
    $c->{Next} = $next;
    show_cal($c);
}

sub show_cal {
    my($c, $month, $year) = @_;
    my $current_month;
    my(@l) = localtime;
    if (!defined $month) {
	$month = $l[4]+1;
	$year  = $l[5]+1900;
	$current_month++;
    } elsif ($month == $l[4]+1 &&
	     $year  == $l[5]+1900) {
	$current_month++;
    }

    $c->delete("text");
    my %common_args = (-anchor => "nw",
		       -font => $top->{FixedFont},
		       -fill => "yellow");

    my $current_date;

    chomp(my @cal = _cal($month, $year));
    my $start_y = int(($c->cget(-height) - scalar(@cal)*$c->{LineHeight})/2);

    my $month_text = shift @cal;
    if ($month_text =~ /^(\s*\S+\s*)(\d+\s*)$/) {
	my($month_name, $year_text) = ($1, $2);
	$c->createText(0, $start_y, %common_args,
		       -tags => ["text", "month"],
		       -text => $month_name);
	$c->createText(length($month_name)*$c->{CharWidth}, $start_y,
		       %common_args,
		       -tags => ["text", "year"],
		       -text => $year_text);
    } else {
	$c->createText(0, $start_y, %common_args,
		       -tags => "text",
		       -text => $month_text);
    }

    my $weekday_text = shift @cal;
    $c->createText(0, $start_y + $c->{LineHeight}, %common_args,
		   -tags => "text",
		   -text => $weekday_text);

    my $y = $start_y + $c->{LineHeight}*2;
    foreach my $cal_line (@cal) {
	if (length($cal_line) < 20) {
	    $cal_line .= " " x (20 - length($cal_line));
	}
	if ($cal_line =~ /^(..) (..) (..) (..) (..) (..) (..)$/) {
	    my(@dates) = ($1,$2,$3,$4,$5,$6,$7);
	    my $x = 0;
	    foreach my $date (@dates) {
		(my $number = $date) =~ s/\D//g;
		my %args = %common_args;
		if ($current_month and $number ne "") {
		    if ($number == ((localtime)[3])) {
			$args{-fill} = "red";
			$current_date = $number;
		    }
		}
		$c->createText($x, $y, %args,
			       -tags => ["text", "date", "date-$number"],
			       -text => $date);
		$x+=$c->{CharWidth}*3;
	    }
	} else {
	    warn "Can't parse $cal_line";
	    $c->createText(0, $y, %common_args,
			   -tags => "text",
			   -text => $cal_line);
	}
	$y += $c->{LineHeight};
    }

    my $set_moon = sub {
	my $day = shift;

	require Time::localtime;
	require Time::Local;

	my $t = Time::Local::timelocal(0,0,0,$day,$month-1,$year-1900);
	my $l = Time::localtime::localtime($t);
	my %res = Astro::Phoon::phase(Astro::Phoon::jtime($l));
	Astro::Phoon::tk_shadow($c, $res{AngRad}, $c->cget(-width)+1, # XXX +1!
			       );

	$c->raise("text");

    };

    my $find_day = sub {
	my(@tags) = $_[0]->gettags("current");
	my $day;
	foreach (@tags) {
	    if (/date-(\d+)/) {
		$day = $1;
		last;
	    }
	}
	$day;
    };

    $c->bind("date",
	     "<Enter>" => sub {
		 my $day = $find_day->($_[0]);
		 return unless defined $day and $day ne "";
		 $c->itemconfigure("current", -fill => "green");
		 $set_moon->($day);
	     });
    $c->bind("date",
	     "<Leave>" => sub {
		 my $day = $find_day->($_[0]);
		 return unless defined $day and $day ne "";
		 if (defined $current_date and $day == $current_date) {
		     $c->itemconfigure("current", -fill => "red");
		 } else {
		     $c->itemconfigure("current", -fill => "yellow");
		 }
	     });
    $c->bind("date",
	     "<1>" => sub {
		 my $day = $find_day->($_[0]);
		 return unless defined $day and $day ne "";
		 require Tk::ICalEvent;
		 if (!Tk::Exists($eventtop)) {
		     $eventtop = $_[0]->Toplevel(-title => "Event");
		     $icalevent = $eventtop->ICalEvent(-icalfile => "$ENV{HOME}/trash/test.ical")->pack(-fill => "both", -expand => 1);
		 }
		 $icalevent->set_date($year, $month, $day);
	     });

    my $prev_month = $month-1;
    my $prev_year  = $year;
    if ($prev_month < 1) {
	$prev_month = 12;
	$prev_year  = $year - 1;
    }

    my $next_month = $month+1;
    my $next_year  = $year;
    if ($next_month > 12) {
	$next_month = 1;
	$next_year  = $year + 1;
    }

    $c->bind("month",
	     "<Enter>" => sub {
		 $_[0]->itemconfigure("current", -fill => "green");
	     });
    $c->bind("month",
	     "<Leave>" => sub {
		 $_[0]->itemconfigure("current", -fill => "yellow");
	     });
    $c->bind("month",
	     "<1>" => sub {
		 show_cal($c, $next_month, $next_year);
	     });
    $c->bind("month",
	     "<3>" => sub {
		 show_cal($c, $prev_month, $prev_year);
	     });

    $c->bind("year",
	     "<Enter>" => sub {
		 $_[0]->itemconfigure("current", -fill => "green");
	     });
    $c->bind("year",
	     "<Leave>" => sub {
		 $_[0]->itemconfigure("current", -fill => "yellow");
	     });
    $c->bind("year",
	     "<1>" => sub {
		 show_cal($c, $month, $year+1);
	     });
    $c->bind("year",
	     "<3>" => sub {
		 show_cal($c, $month, $year-1);
	     });

    $set_moon->(1);

    $c->{Prev}->configure(-command => sub { show_cal($c,
						     $prev_month,
						     $prev_year) });

    $c->{Next}->configure(-command => sub { show_cal($c,
						     $next_month,
						     $next_year) });
}

sub get_meteosat7_image {
    my(%args) = @_;
    get_sat_image($meteosat7_url, %args);
}

sub get_gms5_image {
    my(%args) = @_;
    get_sat_image($gms5_url, %args);
}

sub get_test_image {
    my(%args) = @_;
    get_sat_image($test_url, %args);
}

sub get_xearth_cgi_image {
    my(%args) = @_;
    if (!defined $xearth_cgi_url) {
	$top->messageBox(-title => "Error",
			 -message => "\$xearth_cgi_url not defined",
			 -type => "Ok");
    } else {
	get_sat_image(subst_exe_string($xearth_cgi_url), %args, -resize => 0);
    }
}

sub get_eumetsat_image {
    my(%args) = @_;
    my $ua = get_ua();
    return if !$ua;
    if ($test) {
	$eumetsat_list_url = "file:///home/e/eserte/trash/listImages.pl?m=0,c=1,o=0,s=0,f=1,a=0,n=6,d=1,v=400,p=0";
    }
    my $resp = $ua->get($eumetsat_list_url);
    if (!$resp->is_success) {
	warn $resp->error_as_HTML;
	return;
    }
    my $url;
    my $content = $resp->content;
    while($content =~ m|(/mdrs/img/jpg/DTOT_M_.*\.jpg)|g) {
	$url = $1;
    }
    return if (!defined $url);
    $url = "$eumetsat_root_url$url";
    if ($test) {
	$url = "file:///home/e/eserte/trash/DTOT_M_20030328_183000.jpg";
    }
    # XXX This is not used because get_sat_image probably needs to
    # use another geometry.... wait for a better solution.
    #return if (defined $last_eumetsat_image && $url eq $last_eumetsat_image);
    warn "GET $url\n" if $v;
    $last_eumetsat_image = $url;
    get_sat_image($url, %args);
}

sub get_ua {
    return $ua if $ua;
    return unless eval { require LWP::UserAgent };
    $ua = new LWP::UserAgent;
    $ua->env_proxy;
    if ($^O eq 'MSWin32' && eval { require Win32Util; 1 }) {
        Win32Util::lwp_auto_proxy($ua);
    }
    $ua;
}

sub get_sat_image {
    my($url, %args) = @_;

    my $ua = get_ua();
    return if !$ua;

    my $outfmt = "xpm";
    if (!eval q{ require GD::Convert; GD::Convert->VERSION(2.01); }) {
	if (!eval {
	    require Tk::PNG;
	    $outfmt = "png";
	    1;
	}) {
	    if (!eval {
		require Tk::JPEG;
		$outfmt = "jpeg";
		1;
	    }) {
		warn "Cannot handle xpm, png and jpeg images";
	    }
	}
    }

    my $req = new HTTP::Request('GET', $url);
    my $tmpjpeg = tmpdir() . "/earthclock-$$";
    my $resp = $ua->request($req, $tmpjpeg);
    if ($resp->is_success) {
	(my $infmt = $resp->header('Content-Type')) =~ s|^image/||;

	if (exists $args{-resize} && $args{-resize} == 0) {
	    require File::Copy;
	    File::Copy::cp($tmpjpeg, $args{-tmpfile});
	} else {
	    eval {
		resize_image(-in     => $tmpjpeg,
			     -infmt  => $infmt,
			     -out    => $args{-tmpfile},
			     -outfmt => $outfmt,
			     -width  => $args{-width},
			     -height => $args{-height},
			    );
	    };
	    warn $@ if $@;
	}

	unlink $tmpjpeg;
    } else {
	warn $resp->error_as_HTML;
    }
}

sub set_alarm {
    my $w = shift;
    my $ev = $w->XEvent;
    my($x,$y) = ($ev->x - $w->width/2, $ev->y - $w->height/2);
    my $angle = atan2($y, $x);
    use constant PI => 3.141592653;
    $angle = 2*PI+$angle if $angle < 0; # everything's positive
    my $min = 30*$angle/PI;
    $min += 15;
    $min -= 60 if ($min >= 60);

    require Time::Local;
    my @now = localtime;
    my $add_hour = 0;
    if ($now[1] >= $min) {
	$add_hour = 1;
    }
    $now[1] = int $min;
    my $time = Time::Local::timelocal(@now);
    if ($add_hour) {
	$time += 60*60;
    }
    @now = localtime $time;
    $time = sprintf "%02d:%02d", $now[2], $now[1];

    my $bbbikealarm = find_bbbikealarm_exe();
    if ($bbbikealarm) {
	system("perl $bbbikealarm -ask -tk -time $time &");
    } else {
	$top->messageBox(-message => "Sorry, BBBikeAlarm.pm is not installed on this system");
    }
}

# REPO BEGIN
# REPO NAME max /home/e/eserte/src/repository 
# REPO MD5 6232837b4a9cf07258e364a03b0a89dc

sub max {
    my $max = $_[0];
    foreach (@_[1..$#_]) {
	$max = $_ if $_ > $max;
    }
    $max;
}
# REPO END

# REPO BEGIN
# REPO NAME is_in_path /home/e/eserte/src/repository 
# REPO MD5 8ef726a767d6a3291c0cd8569ce761b1

sub is_in_path {
    my($prog) = @_;
    return $prog if (file_name_is_absolute($prog) and -x $prog);
    require Config;
    my $sep = $Config::Config{'path_sep'} || ':';
    foreach (split(/$sep/o, $ENV{PATH})) {
	return "$_/$prog" if -x "$_/$prog";
    }
    undef;
}
# REPO END

# REPO BEGIN
# REPO NAME file_name_is_absolute /home/e/eserte/src/repository 
# REPO MD5 47355e35bcf03edac9ea12c6f8fff9a3

sub file_name_is_absolute {
    my $file = shift;
    my $r;
    eval {
        require File::Spec;
        $r = File::Spec->file_name_is_absolute($file);
    };
    if ($@) {
	if ($^O eq 'MSWin32') {
	    $r = ($file =~ m;^([a-z]:(/|\\)|\\\\|//);i);
	} else {
	    $r = ($file =~ m|^/|);
	}
    }
    $r;
}
# REPO END

# REPO BEGIN
# REPO NAME tmpdir /home/e/eserte/src/repository 
# REPO MD5 66f13045a8970a4545d814cccd9be848

sub tmpdir {
    foreach my $d ($ENV{TMPDIR}, $ENV{TEMP},
		   "/tmp", "/var/tmp", "/usr/tmp", "/temp") {
	next if !defined $d;
	next if !-d $d || !-w $d;
	return $d;
    }
    undef;
}
# REPO END

sub resize_image {
    my(%args) = @_;
    if (eval { require Imager } &&
	$Imager::formats{$args{-infmt}} &&
	$Imager::formats{$args{-outfmt}}) {
	resize_image_imager(@_);
    } elsif (eval { require GD }) {
	resize_image_gd(@_);
    } else {
	die "Need either GD or Imager for resizing images";
    }
}

# REPO BEGIN
# REPO NAME resize_image /home/e/eserte/src/repository 
# REPO MD5 97c5f141f9c8d736b551c33609fc9f4c

sub resize_image_gd {
    my(%args) = @_;
    my $in     = $args{-in}  || die "No -in file specified";
    my $out    = $args{-out} || die "No -out file specified";
    my $infmt  = $args{-infmt};
    if (!defined $infmt) {
	($infmt = $in) =~ s/^.*\.([^.]+)$/$1/;
    }
    my $outfmt = $args{-outfmt};
    if (!defined $outfmt) {
	($outfmt = $out) =~ s/^.*\.([^.]+)$/$1/;
    }
    my $width  = $args{-width};
    my $height = $args{-height};

    my $constructor =
	{'png' => 'newFromPng',
	 'xbm' => 'newFromXbm',
	 'xpm' => 'newFromXpm',
	 'gd2' => 'newFromGd2',
	 'gd'  => 'newFromGd',
	 'jpg' => 'newFromJpeg',
	 'jpeg'=> 'newFromJpeg',
	 'gif' => 'newFromGif', # for old GD's
	}->{$infmt};
    my $output_meth =
	{'png' => 'png',
	 'jpg' => 'jpeg',
	 'jpeg'=> 'jpeg',
	 'gd'  => 'gd',
	 'gd2' => 'gd2',
	 'gif' => (defined &GD::Image::gif ? 'gif' : undef), # for old GD's
	 'xpm' => (defined &GD::Image::xpm ? 'xpm' : undef),
	 'ppm' => (defined &GD::Image::ppm ? 'ppm' : undef),
	}->{$outfmt};
    if (!$constructor || !$output_meth) {
	die "No constructor or output method found";
    }

    warn "GD constructor $constructor, output method $output_meth\n" if $v;

    open(IN, $in) or die "Could not open $in: $!";
    binmode IN;
    my $in_img = GD::Image->$constructor(\*IN);
    close IN;
    $in_img or die "Could not recognize image data in $in";

    my $out_img = GD::Image->new($width, $height);
    $out_img or die "Could not create empty GD image";
    $out_img->copyResized($in_img, 0, 0, 0, 0,
			  $width, $height,
			  $in_img->getBounds);
    open(OUT, ">$out") or die "Can't write to $out: $!";
    binmode OUT;
    print OUT $out_img->$output_meth();
    close OUT;

}
# REPO END

sub resize_image_imager {
    my(%args) = @_;
    my $in     = $args{-in}  || die "No -in file specified";
    my $out    = $args{-out} || die "No -out file specified";
    my $infmt  = $args{-infmt};
    if (!defined $infmt) {
	($infmt = $in) =~ s/^.*\.([^.]+)$/$1/;
    }
    my $outfmt = $args{-outfmt};
    if (!defined $outfmt) {
	($outfmt = $out) =~ s/^.*\.([^.]+)$/$1/;
    }
    my $width  = $args{-width};
    my $height = $args{-height};

    my $img = Imager->new;
    $img->read(file => $in, type => $infmt)
	or die "Cannot read $in as $infmt: " . $img->errstr;
    my $out_img = $img->scale(xpixels=>$width, ypixels=>$height);
    $out_img->write(file => $out, type => $outfmt)
	or die "Cannot write $out as $outfmt: " . $img->errstr;
}

sub find_bbbikealarm_exe {
    require File::Spec;
    my $bbbikealarm;
    foreach my $lib ("/home/e/eserte/src/bbbike", "$ENV{HOME}/src/bbbike",
		     "/usr/local/BBBike", "/opt/bbbike", @INC) {
	$bbbikealarm = File::Spec->catfile($lib, "BBBikeAlarm.pm");
	if (-r $bbbikealarm) {
	    last;
	}
	undef $bbbikealarm;
    }
    $bbbikealarm;
}

sub stay_on_top {
    if ($^O eq 'MSWin32') {
	win32_stay_on_top();
    }
}

# idea from Jack:
sub win32_stay_on_top {
    $win32_stay_on_top = 0;
    return unless eval { require Win32::API; 1 };
    $win32_stay_on_top = 1;

    use constant HWND_NOTOPMOST => -2;
    use constant HWND_TOPMOST => -1;
    use constant SWP_NOMOVE => 2;
    use constant SWP_NOSIZE => 1;

    my $WinID = hex($top->frame);

    my $API = new Win32::API('user32','SetWindowPos',
			     ['N','N','N','N','N','N','N'],'N');
    my $callAPI = sub {
	my($flag) = @_;
	my($return) = $API->Call($WinID,$flag,0,0,0,0,SWP_NOSIZE|SWP_NOMOVE);
	warn "ERROR in api call" unless $return;
    };

    if ($stay_on_top) {
	$callAPI->(HWND_TOPMOST);
    } else {
	$callAPI->(HWND_NOTOPMOST);
    }
}

sub cleanup {
    unlink $tmpfile;
    exit 0;
}

END {
    cleanup();
}

__END__

=head1 AUTHOR

Slaven Rezic <slaven@rezic.de>

=cut
