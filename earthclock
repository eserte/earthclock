#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: earthclock,v 1.6 2000/02/27 11:34:10 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2000 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: eserte@cs.tu-berlin.de
# WWW:  http://user.cs.tu-berlin.de/~eserte/
#

use Tk;
use X11::Protocol;

$top = new MainWindow;
$top->overrideredirect(1);
$top->geometry("200x200");

my($lastx,$lasty);

$top->bind("<Motion>" => \&motion);
$top->bind("<ButtonPress-1>" => sub { $top->raise; });
$top->bind("<ButtonRelease-1>" => sub { undef $lastx });

my($wrapper) = $top->wrapper;

$x = new X11::Protocol;
$x->init_extension('SHAPE') or die;

sub motion{
    my $w = shift;
    my $e = $w->XEvent;
    return unless $e->s eq 'B1-';
    if (defined $lastx) {
	my(%geom) = $x->GetGeometry($wrapper);
	my $X = $geom{x}+$e->X-$lastx;
	my $Y = $geom{y}+$e->Y-$lasty;
	$x->ConfigureWindow($wrapper, "x" => $X, "y" => $Y);
    }
    $lastx = $e->X;
    $lasty = $e->Y;
}

$c = $top->Canvas(-border => 0,
		  -height => 200,
		  -width => 200,
		  -highlightthickness => 0)->pack;

$id = hex($top->id);
$top->update;

$pixmap = $x->new_rsrc;
$x->CreatePixmap($pixmap, $wrapper, 1, 200, 200);
my $gc = $x->new_rsrc;
$x->CreateGC($gc, $pixmap, 'foreground' => $x->white_pixel);
$gc;
my $delgc = $x->new_rsrc;
$x->CreateGC($delgc, $pixmap, 'foreground' => $x->black_pixel);
$del_gc;
$x->PolyFillRectangle($pixmap, $delgc,
			[(0, 0), 200, 200]);

$x->PolyFillArc($pixmap, $gc, [0, 0, 199, 199, 0, 23040]);

$x->ShapeMask($wrapper, 'Bounding', 'Set', 0, 0, $pixmap);

my $c_h = $c->createLine(100,100,100,50,-width=>5,-fill=>"white");
my $c_m = $c->createLine(100,100,100,0,-width=>5,-fill=>"white");
my $c_s = $c->createLine(100,100,100,0,-width=>3,-fill=>"white");

for my $h (0..11) {
    $c->createLine(
		   100-sin(deg2rad((12-$h)*30))*100,
		   100-cos(deg2rad((12-$h)*30))*100,
		   100-sin(deg2rad((12-$h)*30))*92,
		   100-cos(deg2rad((12-$h)*30))*92,
		   -fill => "white",
		  );
}

$top->repeat(1000, \&draw_time);
MainLoop;

use Math::Trig;

sub draw_time {
    my(@t) = localtime;
    my($h,$m,$s) = @t[2,1,0];
    $h=$h%12;
    $h+=$m/60;
    $m+=$s/60;

    if (!defined $last_earth_update ||
	$last_earth_update+60*30<time) {
#	$last_earth_update+60*1<time) {
	system("xearth -pos fixed,53,13 -size 200,200 -gif > /tmp/e.gif");
	if ($img) {
	    $img->delete;
	}
	$img = $top->Photo(-file => "/tmp/e.gif");
	if (!defined $c_img) {
	    $c_img = $c->createImage(100,100, -tags => "img");
	    $c->lower("img");
	}
	$c->itemconfigure($c_img, -image => $img);
	$last_earth_update=time;
    }

    $c->coords($c_h, 100, 100,
	       100-sin(deg2rad((12-$h)*30))*60,
	       100-cos(deg2rad((12-$h)*30))*60);
    $c->coords($c_m, 100, 100,
	       100-sin(deg2rad((60-$m)*6))*90,
	       100-cos(deg2rad((60-$m)*6))*90);
    $c->coords($c_s, 100, 100,
	       100-sin(deg2rad((60-$s)*6))*90,
	       100-cos(deg2rad((60-$s)*6))*90);
}

__END__
