#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: earthclock,v 1.7 2000/02/27 11:47:40 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2000 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: eserte@cs.tu-berlin.de
# WWW:  http://user.cs.tu-berlin.de/~eserte/
#

use Tk;
use X11::Protocol;
use Getopt::Long;
use Math::Trig;

use strict;

my $pos = "fixed,53,13";
my $wait = 30*60;
my $width = 200;
my $height = 200;
my $geometry;

GetOptions("pos=s" => \$pos,
	   "wait=i" => \$wait,
	   "geometry=s" => \$geometry);

my($x,$y) = (0,0);
if (defined $geometry) {
    ($x,$y,$width,$height) = parse_geometry_string($geometry);
}

my $top = new MainWindow;
my $id = hex($top->id);
$top->overrideredirect(1);
$top->geometry($width."x".$height);

my($lastx,$lasty);
my $last_earth_update;
my $img;
my $c_img;

$top->bind("<Motion>" => \&motion);
$top->bind("<ButtonPress-1>" => sub { $top->raise; });
$top->bind("<ButtonRelease-1>" => sub { undef $lastx });

my($wrapper) = $top->wrapper;

my $x11 = new X11::Protocol;
$x11->init_extension('SHAPE') or die;

my $c = $top->Canvas(-border => 0,
		     -height => $height,
		     -width => $width,
		     -highlightthickness => 0)->pack;

#$top->update;

my $pixmap = $x11->new_rsrc;
$x11->CreatePixmap($pixmap, $wrapper, 1, $width, $height);
my $gc = $x11->new_rsrc;
$x11->CreateGC($gc, $pixmap, 'foreground' => $x11->white_pixel);
my $delgc = $x11->new_rsrc;
$x11->CreateGC($delgc, $pixmap, 'foreground' => $x11->black_pixel);
$x11->PolyFillRectangle($pixmap, $delgc,
			[(0, 0), $width, $height]);
$x11->PolyFillArc($pixmap, $gc, [0, 0, $width-1, $height-1, 0, 23040]);

$x11->ShapeMask($wrapper, 'Bounding', 'Set', 0, 0, $pixmap);

my $c_h = $c->createLine($width/2,$height/2,$width/2,$height/4,
			 -width=>5,-fill=>"white");
my $c_m = $c->createLine($width/2,$height/2,$width/2,0,
			 -width=>5,-fill=>"white");
my $c_s = $c->createLine($width/2,$height/2,$width/2,0,
			 -width=>3,-fill=>"white");

for my $h (0..11) {
    $c->createLine(
		   $width/2-sin(deg2rad((12-$h)*30))*$width/2,
		   $height/2-cos(deg2rad((12-$h)*30))*$height/2,
		   $width/2-sin(deg2rad((12-$h)*30))*($width/2-8),
		   $height/2-cos(deg2rad((12-$h)*30))*($height/2-8),
		   -fill => "white",
		  );
}

$top->repeat(1000, \&draw_time);
MainLoop;

sub motion{
    my $w = shift;
    my $e = $w->XEvent;
    return unless $e->s eq 'B1-';
    if (defined $lastx) {
	my(%geom) = $x11->GetGeometry($wrapper);
	my $X = $geom{x}+$e->X-$lastx;
	my $Y = $geom{y}+$e->Y-$lasty;
	$x11->ConfigureWindow($wrapper, "x" => $X, "y" => $Y);
    }
    $lastx = $e->X;
    $lasty = $e->Y;
}

sub draw_time {
    my(@t) = localtime;
    my($h,$m,$s) = @t[2,1,0];
    $h=$h%12;
    $h+=$m/60;
    $m+=$s/60;

    if (!defined $last_earth_update ||
	$last_earth_update+$wait<time) {
	system("xearth -pos $pos -size $width,$height -gif > /tmp/e.gif");
	if ($img) {
	    $img->delete;
	}
	$img = $top->Photo(-file => "/tmp/e.gif");
	if (!defined $c_img) {
	    $c_img = $c->createImage($width/2, $height/2, -tags => "img");
	    $c->lower("img");
	}
	$c->itemconfigure($c_img, -image => $img);
	$last_earth_update=time;
    }

    $c->coords($c_h, $width/2, $height/2,
	       $width/2-sin(deg2rad((12-$h)*30))*($width/2*.6),
	       $height/2-cos(deg2rad((12-$h)*30))*($height/2*.6));
    $c->coords($c_m, $width/2, $height/2,
	       $width/2-sin(deg2rad((60-$m)*6))*($width/2*.9),
	       $height/2-cos(deg2rad((60-$m)*6))*($height/2*.9));
    $c->coords($c_s, $width/2, $height/2,
	       $width/2-sin(deg2rad((60-$s)*6))*($width/2*.9),
	       $height/2-cos(deg2rad((60-$s)*6))*($height/2*.9));
}

sub parse_geometry_string {
    my $geometry = shift;
    my @extends = (0, 0, 0, 0);
    if ($geometry =~ /([-+]?\d+)x([-+]?\d+)/) {
	$extends[2] = $1;
	$extends[3] = $2;
    }
    if ($geometry =~ /[-+](\d+)[-+](\d+)/) {
	$extends[0] = $1;
	$extends[1] = $2;
    }
    @extends;
}

__END__
